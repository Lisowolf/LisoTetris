@using LisoTetris.Components.Tetris.Engine;
@using LisoTetris.Components.Tetris.Parts;

@if (settingsAccepted)
{
    <PageContainer EnableContentContainer=false>
        <div id="session-container">
            <div id="session-left-container" tabindex="0" @ref="fieldContainer" @onclick="() => fieldContainer.FocusAsync()" @onkeydown="KeyHandler">
                <p hidden="@(!session.FieldState.IsBlocked)">
                    @(session.IsLost ? "You are lost" : "Paused")
                </p>
                <Field FieldState="session.FieldState" />
            </div>
            <div id="session-right-container">
                <div id="session-info-container">
                    <Info Score="session.Score" Speed="session.Speed" />
                </div>
                <div id="session-control-container">
                    <div class="button-container">
                        <button class="button" hidden="@(!session.IsLost)" @onclick="() => settingsAccepted = false">Restart</button>
                        <button class="button" hidden="@session.IsLost" @onclick="Pause">
                            @(session.FieldState.IsBlocked ? "Continue" : "Pause")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </PageContainer>
}
else
{
    <PageContainer Title="Initial Tetris settings">
       <div id="session-settings-container">
            <InitialSettings @ref="initialSettingsComponent" />
       </div>
    </PageContainer>
}

@code {
    private InitialSettings initialSettingsComponent;
    private ElementReference fieldContainer;
    private Session session;
    private bool settingsAccepted;

    protected override void OnInitialized() => initialSettingsComponent = new InitialSettings();

    protected override void OnAfterRender(bool firstRender)
    {
        initialSettingsComponent.Applied = new EventCallback(this, (Action)delegate
        {
            session = new Session(initialSettingsComponent.Width, initialSettingsComponent.Height, 1);
            session.FieldUpdated += () => StateHasChanged();
            session.AutoMoved += async () => await fieldContainer.FocusAsync();

            settingsAccepted = true;
            session.StartInBackground();
        });
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowLeft": session.Control(Direction.Left); break;
            case "ArrowRight": session.Control(Direction.Right); break;
            case "ArrowDown": session.Control(Direction.Down); break;
            case " ": session.Control(Direction.Around); break;
        }
    }

    private void Pause()
    {
        if (session.FieldState.IsBlocked)
            session.StartInBackground();
        else session.Stop();
    }
}