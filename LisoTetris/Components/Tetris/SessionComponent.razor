@using Engine;

@if (settingsAccepted)
{
    <InfoComponent @ref="infoComponent" Score="session.Score" Speed="session.Speed" />

    <button hidden="@(!session.IsLost)" @onclick="() => settingsAccepted = false">Restart</button>
    <button hidden="@session.IsLost" @onclick="Pause">@(session.FieldState.IsBlocked ? "Continue" : "Pause")</button>

    <div tabindex="0" @ref="fieldContainer" @onclick="() => fieldContainer.FocusAsync()" @onkeydown="KeyHandler">
        <p hidden="@(!session.FieldState.IsBlocked)">@message</p>
        <FieldComponent @ref="fieldComponent" FieldState="session.FieldState" />
    </div>
}
else
{
    <SettingsComponent @ref="settingsComponent" />
}

@code {
    private SettingsComponent settingsComponent;
    private FieldComponent fieldComponent;
    private InfoComponent infoComponent;
    private ElementReference fieldContainer;

    private Session session;
    private bool settingsAccepted = false;
    private string message;

    protected override void OnInitialized()
    {
        fieldComponent = new FieldComponent();
        infoComponent = new InfoComponent();
        settingsComponent = new SettingsComponent();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        settingsComponent.Applied += async delegate
        {
            session = new Session(settingsComponent.Width, settingsComponent.Height, 1);
            session.FieldUpdated += () => StateHasChanged();
            session.Lost += () => message = "You are lost";

            settingsAccepted = true;
            await session.StartAsync();
        };
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowLeft": session.Control(Direction.Left); break;
            case "ArrowRight": session.Control(Direction.Right); break;
            case "ArrowDown": session.Control(Direction.Down); break;
            case " ": session.Control(Direction.Around); break;
        }
    }

    private async Task Pause()
    {
        if (session.FieldState.IsBlocked)
            await session.StartAsync();
        else message = "Paused";
        session.FieldState.IsBlocked = !session.FieldState.IsBlocked;
    }
}