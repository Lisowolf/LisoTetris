@using LisoTetris.Components.Tetris.Engine;
@using LisoTetris.Components.Tetris.Parts;
@using LisoTetris.Services
@inject TetrisStateContainer TetrisState

@if (TetrisState.SettingsAccepted)
{
    <PageContainer EnableContentContainer=false>
        <div id="session-container">
            <div id="session-left-container" tabindex="0" @ref="fieldContainer" @onclick="() => fieldContainer.FocusAsync()" @onkeydown="KeyHandler">
                <p hidden="@(!TetrisState.Session.FieldState.IsBlocked)">
                    @(TetrisState.Session.IsLost ? "You are lost" : "Paused")
                </p>
                <Field FieldState="TetrisState.Session.FieldState" />
            </div>
            <div id="session-right-container">
                <div id="session-info-container">
                    <Info Score="TetrisState.Session.Score" Speed="TetrisState.Session.Speed" />
                </div>
                <div id="session-control-container">
                    <div class="button-container">
                        <button class="button" hidden="@(!TetrisState.Session.IsLost)" @onclick="() => TetrisState.SettingsAccepted = false">Restart</button>
                        <button class="button" hidden="@TetrisState.Session.IsLost" @onclick="Pause">
                            @(TetrisState.Session.FieldState.IsBlocked ? "Continue" : "Pause")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </PageContainer>
}
else
{
    <PageContainer Title="Initial Tetris settings">
       <div id="session-settings-container">
            <InitialSettings @ref="initialSettingsComponent" />
       </div>
    </PageContainer>
}

@code {
    private ElementReference fieldContainer;
    private static InitialSettings initialSettingsComponent;

    protected override void OnInitialized() => initialSettingsComponent = new InitialSettings();

    protected override void OnAfterRender(bool firstRender)
    {
        initialSettingsComponent.Applied = new EventCallback(this, (Action)delegate
        {
            TetrisState.Session = new Session(initialSettingsComponent.Width, initialSettingsComponent.Height, 1);
            TetrisState.Session.FieldUpdated += StateHasChanged;
            TetrisState.Session.AutoMoved += () => fieldContainer.FocusAsync();

            TetrisState.SettingsAccepted = true;
            TetrisState.Session.StartInBackground();
        });

        if (firstRender && TetrisState.Session != null)
        {
            TetrisState.Session.FieldUpdated += StateHasChanged;
            fieldContainer.FocusAsync();
        }
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowLeft": TetrisState.Session.Control(Direction.Left); break;
            case "ArrowRight": TetrisState.Session.Control(Direction.Right); break;
            case "ArrowDown": TetrisState.Session.Control(Direction.Down); break;
            case " ": TetrisState.Session.Control(Direction.Around); break;
        }
    }

    private void Pause()
    {
        if (TetrisState.CurrentState == CurrentState.Paused)
            TetrisState.Session.StartInBackground();
        else TetrisState.Session.Stop();
    }
}